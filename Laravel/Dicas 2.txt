instalar via composer -> cmd -> composer create-project --prefer-dist laravel/laravel nomedoProjeto
----------------------------------------------------
iniciar servidor laravel -> php artisan serve
parar o servidor -> ctrl + c
para acessar -> localhost:8000
-------------------------------------------------
iniciar via xampp -> colar a pasta do projeto na pasta htdocs -> acessar normalmente -> localhost/nomedoProjeto/public
---------------------------------------
a pasta vendor não vai para o git, para baixar em outro local -> composer install (vai ler o conteúdo do arquivo composer.json) 
------------------------------------------
configurar o projeto antes de enviar para o servidor -> php artisan cache:clear / php artisan route:clear / php artisan route:cache / apagar os arquivos dentro da pasta storage/framework/sessions
------------------------------------------------------------------
Rotas
listar todas as rotas -> php artisan route:list
rotas definidas no arquivo web.php da pasta routes

Tipos de rotas
Route::get('/', function () {
	return "<h1>Laravel</h1>";
});

Route::get('/ola', function () {
	return "<h1>Seja Bem-vindo!!!</h1>";
});

Route::get('/ola/sejabemvindo', function () {
	return view('welcome');
});

Route::view('/hello', 'hello'); //forma abreviada chamando a rota e a view

Route::view('/viewnome', 'hellonome', ['nome' => 'Nome', 'sobrenome' => 'Sobrenome']); //forma abreviada chamando a rota, a view e passando variáveis

Route::get('/hellonome/{nome}/{sobrenome}', function ($nome, $sn) {
	//forma normal chamando a rota, a view e passando variáveis
	return view('hellonome', [
		'nome' => $nome,
		'sobrenome' => $sn,
	]);
});

//o nome da variável não precisa ser igual ao do parâmetro da função callback
//mas os dados deve estar na mesma ordem e na mesma quantidade das variáveis
Route::get('/nome/{nome}/{sobrenome}', function ($nome, $sn) {
	return "<h1>Ola, $nome, $sn!</h1>";
});

//criar restrição na passagem dos parâmetros da rota  por meio de expressão regular
Route::get('/seunomecomregra/{nome}/{n}', function ($nome, $n) {
	for ($i = 0; $i < $n; $i++) {
		echo "<h1>Ola, $nome, $n!</h1>";
	}
	
})->where('n', '[0-9]+')->where('nome', '[A-Za-z]+');

Route::get('/seunomesemregra/{nome?}', function ($nome = null) {
	// o ? torna o parâmetro opcional
	if (isset($nome)) {
		echo "<h1>Ola, $nome!</h1>";
	} else {
		echo 'Você não passou nenhum nome';
	}
});

//agrupamento de rotas -> app/ -> app/profile/ -> app/about
Route::prefix('app')->group(function () {
	Route::get('/', function () {
		return "Página principal do APP";
	});
	Route::get('profile', function () {
		return "Página profile";
	});
	Route::get('about', function () {
		return "Página about";
	});
});

//redirecionamento de rotas (/aqui para /ola)
Route::redirect('/aqui', '/ola', 301); 

//outra forma de redirecionamento de rota
Route::get('/redirecionarprodutos', function () {
	return redirect()->route('meusprodutos'); 
});

//tipos de requisições (GET somente solicita algo do servidor, já os outros tipos alteram os arquivos do servidor)
Route::get('/rest/hello', function () {
	return "Hello (Get)";
});

Route::post('/rest/hello', function () {
	return "Hello (Post)";
});

Route::delete('/rest/hello', function () {
	return "Hello (Delete)";
});

Route::put('/rest/hello', function () {
	return "Hello (Put)";
});

Route::patch('/rest/hello', function () {
	return "Hello (Patch)";
});

Route::options('/rest/hello', function () {
	return "Hello (Options)";
});

// utilizando o método post
use Illuminate\Http\Request; //é necessário incluir essa linha de comando

Route::post('/rest/imprimir', function (Request $req) {
	$nome = $req->input('nome'); //pega os dados do campo do formulário
	$idade = $req->input('idade'); //pega os dados do campo do formulário
	return "Hello $nome ($idade)!";
});

// agrupando requisições em uma rota
Route::match(['get', 'post'], '/rest/hello2', function () {
	return "Hello World 2!";
});

// atende a qualquer requisição
Route::any('/rest/hello3', function () {
	return "Hello World 3!";
});

// nomear rotas
Route::get('/produtos', function () {
	echo "<h1>Produtos<h1>";
	echo "<ol>";
	echo "<li>Notebook</li>";
	echo "<li>Impressora</li>";
	echo "<li>Mouse</li>";
	echo "</ol>";
})->name('meusprodutos'); //nomeando a rota

// utilizando a rota nomeada
Route::get('/linkprodutos', function () {
	$url = route('meusprodutos'); //utilizando a rota acima
	echo '<a href="' . $url . '">Meus produtos</a>';
});

Route::get('/redirecionarprodutos', function () {
	return redirect()->route('meusprodutos'); //outra forma de redirecionamento de rota
}); 

//para utilizar rota post é preciso utilizar -> use Illuminate\Http\Request;

//limitar os métodos do resource
Route::resource('produtos', 'ProdutoControlador')->only([
    'index', 'store'
]);
Route::get('produto/{id}', 'ProdutoControlador@show')
    ->where('id', '[0-9]+'); //filtrando os dados passados pela rota por meio de expressão regular
Route::delete('produto/{id}', 'ProdutoControlador@destroy')
    ->where('id', '[0-9]+');

---------------------------------------
verificar rotas -> instalar extensão -> Advanced REST client
para acessar pelo chrome -> chrome://apps
-------------------------------------
permitir exceções de requisições -> pasta app/Http/Middleware/VerifyCsrfToken.php -> incluir a rota em ->
protected $except = [
		'/rest*', //rota aqui, o * é para pegar tudo após a rota
	];
---------------------------------------------------------
#Controller
criar controller -> php artisan make:controller MeuControlador
criar controller com os métodos específicos para alterações/visualizações de dados (criará dentro do controlador os métodos -> index();  create(); store(Request $request); show($id); edit($id); update(Request $request, $id); destroy($id)) -> php artisan make:controller MeuControlador --resource
localização dos controladores -> app/Http/Controllers
configurar rota para o controlador -> 
	controlador -> 
		namespace App\Http\Controllers;

		class MeuControlador extends Controller {
			public function getNome() {
				return "José da Silva";
			}
		}
	rota -> Route::get('/nome', 'MeuControlador@getNome');

utilizando a rota para chamar o controlador ->
	Route::get('/nome', 'MeuControlador@getNome'); //utlizando o controlador
	Route::get('/idade', 'MeuControlador@getIdade'); //utlizando o controlador
	Route::get('/multiplicar/{n1}/{n2}', 'MeuControlador@multiplicar'); //passando parâmetros ao controlador
	Route::get('/nomes/{id}', 'MeuControlador@getNomeByID'); //passando parâmetros ao controlador
	Route::resource('/cliente', 'ClienteControlador'); //resource acessa os métodos específicos criados no controlador pelo comando php artisan make:controller MeuControlador --resource

como fica no controlador -> 
	public function getIdade() {
		return "20 anos";
	}

	public function getNome() {
		return "José da Silva";
	}

	public function getNomeByID($id) {
		$v = ["Mario", "Edson", "Roberto", "Jean"];
		if ($id >= 0 && $id < count($v)) {
			return $v[$id];
		} else {
			return "Não encontrado";
		}
	}

	public function multiplicar($n1, $n2) {
		return $n1 * $n2;
	}

//modelos de controllers
namespace App\Http\Controllers;

use Illuminate\Http\Request;

class ClienteControlador extends Controller {
	//página de cadastro
	public function create() {
		return "Formulário para Cadastrar novo Cliente";
	}

	// deleta dados
	public function destroy($id) {
		return response("Apagado cliente com id $id", 200);
	}

	//página carrega dados para edição
	public function edit($id) {
		return "Formulário para Editar Cliente com ID " . $id;
	}

	// página inicial - padrão
	public function index() {
		return "Lista de todos os Clientes - Raiz";
	}

	// método não faz parte do resource
	public function requisitar(Request $request) {
		echo "nome: " . $request->input('nome');
	}

	// página que seleciona dados por id
	public function show($id) {
		$v = ["Mario", "Edson", "Roberto", "Jean"];
		if ($id >= 0 && $id < count($v)) {
			return $v[$id];
		} else {
			return "Não encontrado";
		}
	}

	//salva dados
	public function store(Request $request) {
		$s = "Armazenar: ";
		$s .= "Nome: " . $request->input('nome') . " e ";
		$s .= "Idade: " . $request->input('idade');
		return response($s, 201); //código para dados salvos com sucesso
	}

	// atualiza os dados
	public function update(Request $request, $id) {
		$s = "Atualizar Cliente com id $id: ";
		$s .= "Nome: " . $request->input('nome') . " e ";
		$s .= "Idade: " . $request->input('idade');
		return response($s, 201); //código para dados salvos com sucesso
	}

//rotas para os controllers acima
Route::get('/nome', 'MeuControlador@getNome'); //utlizando o controlador
Route::get('/idade', 'MeuControlador@getIdade'); //utlizando o controlador
Route::get('/multiplicar/{n1}/{n2}', 'MeuControlador@multiplicar'); //passando parâmetros ao controlador
Route::get('/nomes/{id}', 'MeuControlador@getNomeByID'); //passando parâmetros ao controlador
Route::resource('/cliente', 'ClienteControlador'); //resource acessa todos os métodos criados no controlador pelo comando --resource
Route::post('/cliente/requisitar', 'ClienteControlador@requisitar'); //resource acessa todos os métodos criados no controlador pelo comando --resource
---------------------------------------------------------
Código 200 e 201
200 -> O 200 serve para o servidor responder ao cliente que a requisição que ele fez foi atendida. Esse código de resposta acompanha o recurso que foi pedido pelo cliente, que pode ser uma página html, uma figura, ou um arquivo, por exemplo.

201 -> Já o 201 é utilizado especificamente quando você faz um POST ao servidor para criar um novo registro na base de dados. Se esse registro foi criado com sucesso, o servidor retorna um 201, dizendo que um recurso foi criado.

---------------------------------------------------------
o PUT é para atualização total e o PATCH para atualização parcial de uma entidade.
----------------------------------------------------------
#View
localização -> resources -> views
receber dados na view -> 
	<!DOCTYPE html>
	<html>
	<head>
		<title>Minha página</title>
	</head>
	<body>
		<!-- recendo valores das rotas -->
		<h1>Hello, {{$nome}} {{$sobrenome}}</h1>
	</body>
	</html>
verificar se view existe ->
	Route::get('/email/{email}', function ($email) {
		if (View::exists('email')) {
			return view('email', compact('email'));
		} else {
			return view('erro');
		}
	});
rota padrão de erro do Laravel -> resources/views/errors/404.blade.php

template -> 
<!DOCTYPE html>
<html>
<head>
	<title>Meu título - @yield('titulo')</title>
</head>
<body>
	<div>
		<!-- seção compartilhada entre pai e filho -->

		@section('barralateral')
			Esta seção é do template PAI
		@show
		<!-- o show mostra a seção no template filho-->

		<!-- definindo seção -->
		@yield('conteudo')
	</div>
</body>
</html>

página filho -> 
<!-- herdando o template contido dentro da pasta layout -->
@extends('layout.app')

@section('titulo', 'Minha página - Filho')

<!-- seção que existe também no template pai, para não sobrescrever deve-se usar  -->
@section('barralateral')
	@parent <!-- mostra a seção definida com o mesmo no template pai sem sobrescrever um ao outro -->
	<p>Esta parte é da seção do template filho</p>
@endsection

@section('conteudo')
	<p>Este é o conteúdo do filho</p>
@endsection

utilizando component ->
<html>
<head>
	<title>Página do Bootstrap</title>
	<!-- <link rel="stylesheet" type="text/css" href="{{asset('css/app.css')}}"> -->
	<link rel="stylesheet" type="text/css" href="{{URL::to('css/app.css')}}">
</head>
<body>
	<!-- <script type="text/javascript" src="{{asset('js/app.js')}}"></script> -->
	<!-- ou -->
	@component('components.meucomponente')
		<strong>Erro: </strong> Sua mensagem de erro.
	@endcomponent
	<script type="text/javascript" src="{{URL::to('js/app.js')}}"></script>
</body>
</html>

pasta view/component/meucomponente.blade.php -> 
<div class="alert alert-primary" role="alert">
  {{$slot}}
</div>

passando parâmetros para componentes -> 
	-> no component
	<div class="alert alert-{{$tipo}}" role="alert">
	  <div class="alert-title">{{$titulo}}</div>
	  {{$slot}}
	</div>

	-> view ->
	<body>
		@component('components.meucomponente', ['tipo' => 'danger', 'titulo' => 'Erro fatal'])
			<strong>Erro: </strong> Sua mensagem de erro.
		@endcomponent

		<script type="text/javascript" src="{{URL::to('js/app.js')}}"></script>
	</body>

customizando chamadas a componentes ->
	-> app/Providers/AppServiceProvider.php -> editar ->
		namespace App\Providers;
		use Illuminate\Support\Facades\Blade;
		use Illuminate\Support\ServiceProvider;
		public function boot() {
			Blade::component('components.meucomponente', 'alerta'); //nomeando o componente
		}
	-> utilizando o componente nomeado (já na view) -> 
		@alerta(['tipo' => 'danger', 'titulo' => 'Erro fatal'])
			<strong>Erro: </strong> Sua mensagem de erro.
		@endalerta

if e empty na view ->
class ProdutoControlador extends Controller {
	public function listar() {
		$produtoss = [
			"Notebook Asus i7 16GB",
			"Mouse e teclado Microsoft USB",
			"Monitor 21 - Samsung",
			"Impressora HP",
			"Disco SSD 512GB",
		];

		$produtos = [];

		return view('/produtos', compact('produtos'));
	}
}

<body>

	@if(isset($produtos))

		@if(count($produtos) == 0)
			<h1>Nenhum produto</h1>
		@elseif (count($produtos) === 1)
			<h1>Um produto</h1>
		@else
			<h1>Temos vários produtos</h1>
		@endif

		@empty($produtos)
			<h2>Nada em produtos</h2>
		@endempty

	@else
		<h2>Variável produtos não foi passada como parâmetro</h2>
	@endif

	<script type="text/javascript" src="{{URL::to('js/app.js')}}"></script>
</body>

o método hasSection (só mostra a seção se esta existir) -> dentro do template
	@hasSection('minha_secao_produtos') //verifica a seção da view normal
	<div class="card">
		<div class="card-body">
			<h5 class="card-title">Produtos</h5>

			<p class="card-text">
				@yield('minha_secao_produtos')
			</p>
			<a href="#" class="card-link">Informações</a>
			<a href="#" class="card-link">Ajuda</a>
		</div>
	</div>
	@endif

switch case -> 
	na rota ->
		public function mostrar_opcoes() {
			return view('/mostrar_opcoes');
		}

		public function opcoes($opcao) {
			return view('opcoes', compact('opcao'));
		}

	na view ->
	@extends('layout.meulayout')

	@section('minha_secao_produtos')
		<a href="/opcoes/1" class="btn btn-primary btn-sm" role="button" aria-disable="true">Azul</a>
		<a href="/opcoes/2" class="btn btn-danger btn-sm" role="button" aria-disable="true">Vermelho</a>
		<a href="/opcoes/3" class="btn btn-success btn-sm" role="button" aria-disable="true">Verde</a>
		<a href="/opcoes/4" class="btn btn-warning btn-sm" role="button" aria-disable="true">Amarelo</a>
		<a href="/opcoes/5" class="btn btn-light btn-sm" role="button" aria-disable="true">Branco</a>
	@endsection

	@extends('layout.meulayout')

	@section('minha_secao_produtos')
		Voçê escolheu a opção:
		@if(isset($opcao))
			@switch($opcao)
				@case(1)
					<span class="badge badge-primary">Azul</span>
					@break;
				@case(2)
					<span class="badge badge-danger">Vermelho</span>
					@break;
				@case(3)
					<span class="badge badge-success">Verde</span>
					@break;
				@case(4)
					<span class="badge badge-warning">Amarelo</span>
					@break;
				@default
					<span class="badge badge-dark">Outra cor</span>
			@endswitch
		@endif
	@endsection

	no controlador ->

	public function mostrar_opcoes() {
		return view('/mostrar_opcoes');
	}

	public function opcoes($opcao) {
		return view('opcoes', compact('opcao'));
	}
---------------------------------------------------------------------------------
Instalar Bootstrap via npm
cmd -> npm install (o arquivo package.json mostra as dependências que serão baixadas)
editar o arquivo o arquivo resources/js/app.js e comentar tudo referente a vue
cmd -> npm run dev (irá compilar os arquivos /js/app.js e /css/app.css na pasta public)
dentro da view basta incluir os arquivos css e js -> 
<html>
<head>
	<title>Página do Bootstrap</title>
	<link rel="stylesheet" type="text/css" href="{{asset('css/app.css')}}"> //usar asset
		ou
	<link rel="stylesheet" type="text/css" href="{{URL::to('css/app.css')}}"> //usar URL::to
</head>
<body>
	<div class="alert alert-primary" role="alert">
	  Um simples alerta primary. Olha só!
	</div>
	<script type="text/javascript" src="{{asset('js/app.js')}}"></script> //usar asset
	ou
	<script type="text/javascript" src="{{URL::to('js/app.js')}}"></script> //usar URL::to
</body>
</html>