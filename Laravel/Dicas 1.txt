#Instalação do Homestead (servidor portátil - já vem com todos os aplicativos necessários: composer, laravel, php)
1 - Instalar na sequência o -> Virtual BOX; Vagrant; git;
2 - Verificar se o vagrant e git foram instalados corretamente -> cmd ->
	->vagrant -v (retorna a versão)
	->git --version (retorna a versão)
3 - Instalar o homestead -> cmd -> vagrant box add laravel/homestead -> escolha (3) virtual box
4 - verificar o homestead -> cmd -> vagrant box list -> retorna 
laravel/homestead
5 - Clonar o repositótio github do laravel -> cmd -> git clone https://github.com/laravel/homestead Homestead
---------------------------------------------------------------------------

#Configurando o Homestead
1 - cmd -> cd Homestead -> init.bat -> será criado um arquivo chamado Homestead.yaml
2 - Abra o arquivo Homestead.yaml em um editor de texto -> 
		-> ip, memory, cpus e provider: padrões
		-> criar chave ssh -> gitbash -> acessar a home do usuário caso não tenha o ~ -> cd ~ -> ssh-keygen -t rsa -C "email que ficará vinculado à chave" -> enter 3 vezes -> para verificar se a chave foi criada corretamente -> verificar se a pasta .ssh foi criado contendo dois arquivos
		-> após a criação das chaves -> authorize e keys do arquivo Homestead.yaml -> padrões
		-> folders ->
			-> map -> pasta da sua máquina que deseja sicronizar -> ~/Documents/Laravel/Sites
			-> to -> onde dentro do homestead que você quer que aquela pasta esteja -> /home/vagrant/Sites
		-> sites
			-> map -> nome do domínio de teste do projto -> Ex: projeto1.test
			-> to -> local para onde o domínio irá apontar dentro do servidor local -> /home/vagrant/Sites/projeto1/public
		-> databases -> nome da base de dados -> projeto 1
---------------------------------------------------------------------

#Criando um projeto Laravel
1 - cmd -> cd Homestead -> vagrant up -> (bug PowerShell - caso ocorra -> abra o PowerShell -> $PSVersionTable -> feche e volte para o cmd) -> (bug Timed out while waiting for the machine to boot -> ative o Intel Virtualization Technology na bios da placa-mãe) -> vagrant ssh
2 - instalar a última versão do Laravel dentro da máquina virtual por meio do composer -> composer global require laravel/installer
3 - listar a pastas do servidor local/máquina virtual -> cmd -> ls -la
4 - entrar na pasta que iremos trabalhar -> cd Sites
5 - criar o projeto laravel -> cmd -> laravel new projeto1
6 - configurar o arquivo Homestead.yaml
	...
	-> sites
		-> map -> nome do domínio de teste do projeto -> Ex: projeto1.dev
		-> to -> local para onde o domínio irá apontar dentro do servidor local -> /home/vagrant/Sites/projeto1/public
7 - configurar o host do windows -> abra o bloco de notas como administrador -> localize o arquivo hosts -> C:\Windows\System32\drivers\etc\ -> incluir o ip padrão do homestead no final -> 192.168.10.10      projeto1.test
8 - criar o nome do database -> Homestead.yaml -> 
	...
	-> databases -> projeto1
9 - após configurar o projeto -> recarregar o homestead -> cmd -> exit -> vagrant reload --provision
10 - testar o DB -> após o homestead está carregado -> cmd -> vagrant ssh -> mysql -u homestead -> deverá aparecer 'mysql>' -> show databases
11 - desligar o homestead -> vagrant halt
-------------------------------------------------------------------------------

#Utilizando Homestead
1 - utlizar o homestead -> cmd -> cd Homestead -> vagrant up -> vagrant ssh -> ls -la -> cd Sites/projeto1
2 - sair dos ervidor -> cmd -> exit
3 - desligar o homestead -> cmd -> vagrant halt
-------------------------------------------------------------------------------------

#Rotas
1 - pasta routes -> web.php -> 
	-> 	Route::get('/', function () {
			return view('welcome'); (não se coloca a extensão) ou return "Contato";
		});
	-> Route::resource('/contato', 'ContatoController'); (utilizando controllers)
-----------------------------------------------------------------------------------

#View
1 - pasta resources -> pasta views -> crie uma view
-------------------------------------------------------------------------------

#Controller
1 - pasta Http -> Controllers 
2 - criar controller pelo artisan -> cmd (deve estar dentro da pasta do projeto) -> php artisan make:controller NomedoController
3 - exemplo de controller ->
<?php

namespace App\Http\Controllers;
Ex1:
class ContatoController extends Controller {
	public function index() {
		$data['titulo'] = "Minha página de contato";

		return view('contato', $data); //joga os dados do array $data para a view contato
	}
}

Ex2:
class ContatoController extends Controller {
	public function index() {
		$data = ['hoje', 'ontem', 'amanhã']; array qualquer

		return view('subpasta.contato', array('datas' => $data)); //nome da subpasta + nome da view sem extensão / passando o array $data pra view por meio do índice datas 
	}
}

4 - para utilizar na view os dados do controller -> dentro da view -> exemplo
	-> <h1>?php echo $titulo; ?</h1>

5 - tipos de manipulação de dados no arquivo do controller -> pasta app -> Http -> Controllers ->
	-> listar todos -> public function index() {
					$produtos = Produtos::all(); //exibe todos os dados do model Produtos
				} 
	-> listar dado específico -> public function show($id) {
							$produtos = Produtos::find($id); //exibe dados por id (domínio.com/produtos/1)
						  }
	-> cadastrar dados de um formulário em um BD 
			->  public function create() {
					return view('produtos.create');
				}

			-> public function store(Request $request) {
					$produto = new Produtos();
					$produto->sku = $request->input('sku');
					$produto->titulo = $request->input('titulo');
					$produto->descricao = $request->input('descricao');
					$produto->preco = $request->input('preco');

					if ($produto->save()) {
						return redirect('produtos/create')->with('success', 'Produto cadastrado com sucesso!!!'); //caso queira passar uma informação para outra view, usase-se o ->with('')
					}
				}

				Obs: caso queira recuperar os dados do with -> dentro da view -> utilizando o exemplo acima -> $message = Session::get('success').Na view, basta incluir {{$message}}.

	-> editar dados de um formulário
			->  public function edit($id) {
					$produto = Produtos::find($id);
					return view('produtos.edit', compact('produto', 'id'));
				}

			-> public function update(Request $request, $id) {

					$produto = Produtos::find($id);

					$this->validate($request, [
						'sku' => 'required|min:3',
						'titulo' => 'required|min:3',
						'descricao' => 'required|min:10',
						'preco' => 'required|numeric',
					]);

					$produto->sku = $request->get('sku');
					$produto->titulo = $request->get('titulo');
					$produto->descricao = $request->get('descricao');
					$produto->preco = $request->get('preco');

					if ($produto->save()) {
						return redirect('produtos/' . $id . '/edit')->with('success', 'Produto atualizado com sucesso!!!');
					}
				}
	-> upload de imagens ->
		public function update(Request $request, $id) {

		$produto = Produtos::find($id);

		$this->validate($request, [
			'sku' => 'required|min:3',
			'titulo' => 'required|min:3',
			'descricao' => 'required|min:10',
			'preco' => 'required|numeric',
		]);

		if ($request->hasFile('imgproduto')) {      //upload de imagem
			$imagem = $request->file('imgproduto');
			$nomearquivo = md5($id) . "." . $imagem->getClientOriginalExtension();
			$imagem->move(public_path('./img/produtos/'), $nomearquivo);
		}

		$produto->sku = $request->get('sku');
		$produto->titulo = $request->get('titulo');
		$produto->descricao = $request->get('descricao');
		$produto->preco = $request->get('preco');

		if ($produto->save()) {
			return redirect('produtos/' . $id . '/edit')->with('success', 'Produto atualizado com sucesso!!!');
		}
	}

	<form method="POST" enctype="multipart/form-data" action="{{action('ProdutosController@update', $id)}}">
	...
		<div class="input-group mb-3">
	 		<label for="imgproduto">Imagem</label>
	 		<input type="file" id="imgproduto" name="imgproduto" class="form-control-file">
	 	</div>
	...
	</form>

	-> exclusão -> 
	public function destroy($id) {
		$produto = Produtos::find($id);

		if (file_exists("./img/produtos/" . md5($id) . ".jpg")) {
			unlink("./img/produtos/" . md5($id) . ".jpg");
		}

		$produto->delete();
		return redirect()->back()->with('success', 'Produto Deletado com sucesso');
	}

	<form method="POST" enctype="multipart/form-data" action="{{action('ProdutosController@destroy', $produto->id)}}">
		@csrf
		<input type="hidden" name="_method" value="DELETE">
		<a href="{{URL::to('produtos/' . $produto->id . '/edit')}}" class="btn btn-primary">Editar</a>
		<button class="btn btn-danger">Excluir</button>
	</form>

	-> busca -> 
	public function busca(Request $request) {
		$buscaInput = $request->input('busca');
		$produtos = Produtos::where('titulo', 'LIKE', '%' . $buscaInput . '%')
			->orwhere('descricao', 'LIKE', '%' . $buscaInput . '%')
			->get();
		return view('produtos.index', ['produtos' => $produtos, 'buscar' => $buscaInput]);
	}

	-> paginação -> 
	public function index() {
		$produtos = Produtos::paginate(3); //incluir paginate
		return view('produtos.index', ['produtos' => $produtos, 'buscar' => null]);
	}

	public function busca(Request $request) {
		$buscaInput = $request->input('busca');
		$produtos = Produtos::where('titulo', 'LIKE', '%' . $buscaInput . '%')
			->orwhere('descricao', 'LIKE', '%' . $buscaInput . '%')
			->paginate(3); //incluir paginate
		return view('produtos.index', ['produtos' => $produtos, 'buscar' => $buscaInput]);
	}

	@extends('layout.app')
	@section('title', 'Lista de produtos')
	@section('content')
		<h1>Produtos</h1>
		@if($message = Session::get('success'))
			...
				</div>
			@endforeach
		</div>
		{{$produtos->links()}} //incluir esse código 
	@endsection

	-> ordenação ->
	public function ordem(Request $request) {
		$ordemInput = $request->input('ordem');

		if ($ordemInput == 1) {
			$campo = 'titulo';
			$tipo = 'asc';
		} else if ($ordemInput == 2) {
			$campo = 'titulo';
			$tipo = 'desc';
		} else if ($ordemInput == 3) {
			$campo = 'preco';
			$tipo = 'desc';
		} else if ($ordemInput == 4) {
			$campo = 'preco';
			$tipo = 'asc';
		}

		$produtos = Produtos::orderBy($campo, $tipo)->paginate(3);
		return view('produtos.index', ['produtos' => $produtos, 'buscar' => null, 'ordem' => $ordemInput]);
	}

	-> agregação -> 
	public function index() {
		// $produtos = Produtos::all();
		// return view('produtos.index', ['produtos' => $produtos, 'buscar' => null]);

		$produtos = Produtos::paginate(3);
		$maiscaro = Produtos::all()->max('preco');
		$maisbarato = Produtos::all()->min('preco');
		$media = Produtos::all()->avg('preco');
		$soma = Produtos::all()->sum('preco');
		$contagem = Produtos::all()->count();
		$maiorDez = Produtos::where('preco', '>', 10)->count();
		return view('produtos.index', ['produtos' => $produtos, 'buscar' => null, 'ordem' => null, 'maiscaro' => $maiscaro, 'maisbarato' => $maisbarato, 'media' => $media, 'soma' => $soma, 'contagem' => $contagem, 'maiorDez' => $maiorDez]);
	}
------------------------------------------------------------------------

#Model e Migrations
1 - model -> pasta app
	migration -> pasta database -> migrations
2 - criar model e migration pelo artisan -> cmd -> php artisan make:model NomedoModel --migration 
3 - criar a estrutura da tabela no migration -> pasta database -> migrations -> localizar o arquivo referente ao model -> 
	...
	public function up() {
		Schema::create('produtos', function (Blueprint $table) {
			$table->bigIncrements('id'); //essa linha é padrão
			$table->string('sku'); //criar as colunas da tabela
			$table->string('titulo');
			$table->longtext('descricao');
			$table->float('preco', 8, 2);
			$table->timestamps();
		});
	}
4 - criar a tabela de fato -> cmd -> php artisan migrate
-----------------------------------------------------------------------------

#Acessando múltiplas tabelas (Join Ex: um para muitos)
1 - criar a migration (database/migrations/) -> cmd -> php artisan make:migration create_comentarios_table --create=comentarios
2 - criar as colunas da tabela dentro da migration -> 
...
public function up() {
		Schema::create('comentarios', function (Blueprint $table) {
			$table->bigIncrements('id');
			$table->integer('produto_id'); //chave estrangeira
			$table->string('usuario');
			$table->string('comentario');
			$table->timestamps();
			$table->foreign('produto_id')->references('id')->on('produtos'); //relacionando com a tabela 'produtos'
		});
	}
...
3 - criar a tabela de fato -> cmd -> php artisan migrate
4 - criar seeder (trabalhar com os dados da tabela dentro do laravel) -> cmd -> php artisan make:seeder ComentariosTableSeeder -> o arquivo será criado em -> database/seeds/
5 - manipular dados da tabela por meio do seeder ->
inserindo dados na tabela
...
public function run() {
	DB::table('comentarios')->insert([
		'produto_id' => 6,
		'usuario' => 'Julia',
		'comentario' => 'Espetacular',
		'created_at' => date("Y/m/d h:i:s"),
		'updated_at' => date("Y/m/d h:i:s"),
	]);

	DB::table('comentarios')->insert([
		'produto_id' => 6,
		'usuario' => 'Maria',
		'comentario' => 'Muito bom',
		'created_at' => date("Y/m/d h:i:s"),
		'updated_at' => date("Y/m/d h:i:s"),
	]);
...
6 - atualizar o seeder criado via composer -> cmd -> composer dump-autoload
7 - autualizar os dados criados na tabela via seed -> php artisan db:seed --class=ComentarioTableSeeder
8 - conferir se os dados foram inseridos com sucesso -> mysql -u homestead projeto1 -> select * from comentarios -> exit
9 - criar o model referente à tabela criada -> php artisan make:model Comentario -> será criado um model dentro da pasta -> app/
10 - dentro do model criado (que a possuí a chave estrangeira) -> 
...
class Comentario extends Model {
	protected $table = 'comentarios'; //incluir este comando
}
...
11 - dentro do model (app/Produtos.php) referente à tabela principal (Produtos) ->
...
class Produtos extends Model {
	public function mostrarComentarios() { //informar ao model quais itens/colunas estão relacionados
		return $this->hasMany('App\Comentario', 'produto_id', 'id'); 
	}
}
... 
12 - dentro do controlador (app/Http/Controllers/ProdutoController) -> relacionar as tabelas ->
...
public function show($id) {
	$produto = Produtos::with('mostrarComentarios')->find($id);
	return view('produtos.show', ['produto' => $produto]);
}
...
13 - incluir os dados na view -> abrir a view (resources/views/produtos/show.blade.php) ->
...
<div class="row">
	@foreach($produto->mostrarComentarios as $comentario)
	<div class="card col-md-12">
		<div class="card-header">
			{{$comentario->usuario}}
		</div>
		<div class="card-body">
			{{$comentario->comentario}}
		</div>
		<div class="card-footer">
			{{date("d/m/y H:i", strtotime($comentario->updated_at))}}
		</div>
	</div>
	@endforeach
</div> 
...
----------------------------------------------------------------------------

#Excluir dados do DB com segurança
1 - criar a coluna deleted_at -> cmd -> mysql -u homestead projeto1 -> alter table produtos add deleted_at TIMESTAMP NULL;
2 - caso dê erro no comando acima, utilizar o comando -> set sql_mode = '';
3 - abra o arquivo do model (Produto) ->
...
use Illuminate\Database\Eloquent\SoftDeletes; //incluir esta linha

class Produtos extends Model {
	use SoftDeletes; //incluir esta linha

	protected $dates = ['deleted_at']; //incluir esta linha

	public function mostrarComentarios() {
		return $this->hasMany('App\Comentario', 'produto_id', 'id');
	}
}
4 - ao arquivo deletado é criada a data de exclusão
--------------------------------------------------------------------------

#Enviar emails com o laravel
1 - instalar a biblioteca para envio -> cmd -> composer require guzzlehttp/guzzle
2 - criar uma conta no site -> https://www.mailgun.com/
3 - configurando o laravel -> 
		pasta config -> mail.php -> 
				'driver' => env('MAIL_DRIVER', 'mailgun'),
				'from' => [
			        'address' => null,
			        'name' => null,
			    ],

			    'username' => env(''), //coloca o que está no domain do mailgun 'Default SMTP Login'
			    'password' => env('MAIL_PASSWORD'), //coloca o que está no domain do mailgun 'Default Password'

		arquivo .env ->
			...
			MAIL_DRIVER=mailgun
			MAIL_HOST=smtp.mailgun.org
			MAIL_PORT=587
			MAIL_USERNAME= //coloca o que está no domain do mailgun 'Default SMTP Login'
			MAIL_PASSWORD= //coloca o que está no domain do mailgun 'Default Password'
			MAIL_ENCRYPTION=tsl
			MAILGUN_DOMAIN= //coloca o que está no domain, abaixo de domain
			MAILGUN_SECRET= //coloca o que está no domain do mailgun 'API Key'
			...

		pasta config -> services.php -> puxará os dados de .env.php

4 - incluir rotas para o envio de emails (pasta routes/web.php) -> 
		Route::get('/contato', 'ContatoController@index');
		Route::post('/contato/enviar', 'ContatoController@enviar');

5 - alterar o controller (ContatoController) -> 
	namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class ContatoController extends Controller {
	public function enviar(Request $request) {
		$dadosEmail = [
			'nome' => $request->input('nome'),
			'email' => $request->input('email'),
			'assunto' => $request->input('assunto'),
			'msg' => $request->input('msg'),
		];

		Mail::send('email.contato', $dadosEmail, function ($message) {
			$message->from('jotafilho18@gmail.com', 'Formulário de Contato');
			$message->subject('Mensagem enviada pelo formulário de contato');
			$message->to('jotafilho18@gmail.com');
		});

		return redirect('contato')->with('success', 'Mensagem Enviada, em breve entraremos em Contato');
	}

	public function index() {
		$data['titulo'] = "Contato";

		return view('contato', $data);
	}

6 - criar um template para o cadastro de envio de email

7 - criar uma pasta email dentro da pasta view e criar um template padrão para o envio de email e incluir -> 
@extends('layout.app')
@section('content')
	<div class="row">
		<h4 class="mb-3">Contato pelo Site</h4>
		<table class="table table-bordered">
		  <tbody>
		    <tr>
		      <td><strong>Nome:</strong></td>
		      <td>{{$nome}}</td>
		    </tr>
		    <tr>
		      <td><strong>Email:</strong></td>
		      <td>{{$email}}</td>
		    </tr>
		    <tr>
		      <td><strong>Assunto:</strong></td>
		      <td>{{$assunto}}</td>
		    </tr>
		    <tr>
		      <td><strong>Mensagem:</strong></td>
		      <td>{{$msg}}</td>
		    </tr>
		    <tr>
		    </tr>
		  </tbody>
		</table>
	</div>
@endsection


-----------------------------------------------------------------------------

#Nomenclaturas
1 - Controllers (classe) -> ControllerContato
2 - Models (classe) -> ModelContato
3 - View -> contato.php
-------------------------------------------------------------------------

#Conexão com BD
1 - configuração com servidor web -> pasta config -> database.php
2 - configuração com servidor local -> pasta raiz -> .env ->
	->  DB_CONNECTION=mysql
		DB_HOST=127.0.0.1
		DB_PORT=3306
		DB_DATABASE=homestead (alterar para o banco de dados criado no arquivo Homestead.yaml)
		DB_USERNAME=homestead
		DB_PASSWORD=secret
	-> verificar se foi configurado corretamente -> cmd -> php artisan migrate:install (cria a tabela migrations) -> cmd -> mysql -u homestead projeto1 -> show tables;
------------------------------------------------------------------------------

#Pack de tradução do Laravel
1 - copie o arquivo da tradução -> pasta resources -> pasta lang
2 - pasta config -> app.php -> altere -> 
	-> 'locale' => 'en',             ->    'locale' => 'pt-BR',
	-> 'fallback_locale' => 'en',    ->    'fallback_locale' => 'pt-BR',
------------------------------------------------------------------------------

#Template View (Blade)
1 - pasta resources -> views (é interessante criar uma pasta para cada model)
2 - nomenclatura -> nomedaview.blade.php
3 - {{}} -> significa que terá código php
4 - laços de repetição ->
 	-> foreach -> 	@foreach ($produtos as $produto)
 						<li><a href="http://projeto1.test/produtos/{{$produto->id}}">{{$produto->titulo}}</a><li> //o {{}} equivale ao echo do php
 					@endforeach

 	-> if-> @if($message = Session::get('success'))
				<div class="alert alert-success">
					{{$message}}
				</div>
			@endif

5 - criar view template -> pasta resources -> views -> @yield('nomedaseção') -> marcação do template blade -> 
	<!DOCTYPE html>
	<html lang="pt-br">
	<head>
		<meta charset="utf-8">
		<title>Nosso Site - @yield('title')</title> //define uma seção de título do template
	</head>
	<body>
		<div class="container">
			@yield('content') //define uma seção de conteúdo do template
		</div>
	</body>
	</html>

6 - Utilizar template junto com view -> dentro das views -> 
	-> @extends('subpasta.nomeview')
	-> @section('title', 'Lista de produtos')
	-> @section('content')
		-> conteudo
	-> @endsection
---------------------------------------------------------------------------

#Instalação do Bootstrap via composer
1- cmd - composer require twbs/bootstrap
2 - os arquivos do bootsrap -> pasta vendor -> pasta twbs => bootstrap
3 - mover a pasta dist (fica dentro da pasta twbs -> bootstrap) para a pasta public -> cmd -> cp -r vendor/twbs/bootstrap/dist public/
4 - download jQuery -> https://jquery.com/download/ -> Download the compressed, production jQuery 3.3.1 -> salvao arquivo na pasta do projeto -> pasta public -> js
5 - incluir o bootstrap e o jquery no template blade -> {{URL::to('caminho aqui')}} -> para evitar erro na localização dos arquivos
<!DOCTYPE html>
<html lang="pt-br">
<head>
	<meta charset="utf-8">
	<title>Nosso Site - @yield('title')</title>
	<link rel="stylesheet" type="text/css" href="{{URL::to('dist/css/bootstrap.min.css')}}">
</head>
<body>
	<div class="container">
		@yield('content')
	</div>
	<script type="text/javascript" src="{{URL::to('js/jquery.min.js')}}"></script>
	<script type="text/javascript" src="{{URL::to('dist/js/bootstrap.min.js')}}"></script>
</body>
</html>
-------------------------------------------------------------------------

#Fomulário 
1 - tag action do form -> action="{{url('')}}"
2 - @csrf -> cria um input do tipo hidden que evita ataques cross site e outros
-------------------------------------------------------------------------

#Validação de formulário
1 - exemplo de validação -> deve ser realizado no controller ->
public function store(Request $request) {

		$this->validate($request, [ //chamada para as validações
			'sku' => 'required|unique:produtos|min:3', //nome do campo do formulário + tipos de validações (required -> requerido; unique:produtos ->significa que deve ser único dentro da tabela produtos;  min -> mínimo de caracteres)
			'titulo' => 'required|min:3',
			'descricao' => 'required|min:10',
			'preco' => 'required|numeric',
		]);

		$produto = new Produtos();
		$produto->sku = $request->input('sku');
		$produto->titulo = $request->input('titulo');
		$produto->descricao = $request->input('descricao');
		$produto->preco = $request->input('preco');

		if ($produto->save()) {
			return redirect('produtos/create')->with('success', 'Produto cadastrado com sucesso!!!');
		}
	}
2 - mostrar as mensagens de erro na view -> 
@if(count($errors)>0)
	<div class="alert alert-danger">
		<ul>
			@foreach($errors->all() as $error)
				<li>{{$error}}</li>
			@endforeach
		</ul>
	</div>
@endif
-------------------------------------------------------------------------------------

#Autenticação (Login, logout)
1 - criação pelo artisan -> cmd -> php artisan make::auth
2 - cria a pasta auth dentro da pasta view (resources/)  -> cria pasta layouts (contento as views de login, cadastro, etc..)
3 - basta editar as views da pasta resources/views/layouts/app.blade.php e resources/views/auth/ e alterar para o português
4 - proteger páginas para usuários logados -> 
use Illuminate\Support\Facades\Auth;

public function create() {
	if (Auth::check()) {
		return view('produtos.create');
	} else {
		return redirect('login');
	}
}

Proteção parcial 
@if(Auth::check())
	<div class="mb-3">
		<form method="POST" enctype="multipart/form-data" action="{{action('ProdutosController@destroy', $produto->id)}}">
			@csrf
			<input type="hidden" name="_method" value="DELETE">
			<a href="{{URL::to('produtos/' . $produto->id . '/edit')}}" class="btn btn-primary">Editar</a>
			<button class="btn btn-danger">Excluir</button>
		</form>
	</div>
@endif

5 - @guest (layouts/app.blade.php) -> não precisa estar autenticado para visualizar
	@else (layouts/app.blade.php) -> precisa estar autenticado para visualizar

6 - mudar o nome da aplicação - sidebar  

		-> sistema em produção -> pasta config -> app.php -> 
		...
		'name' => env('APP_NAME', 'MeuSite'),
		...

		-> sistema em teste -> arquivo .env -> APP_NAME=MeuSite






